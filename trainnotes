介绍
1> 指针定义:指针是保存变量地址的变量。
2> 本文重点
>> 指针与数组之间的关系
>> 操纵指针的规则
3> 指针优点
>> 表达某个计算的唯一途径
>> 代码更高效，更紧凑
4> 指针缺点:难以理解，但是用好了，代码会非常清晰。
5> 将指针、数组和地址的算术运算集成在一起是C语言的一大优点。
指针与地址
1> 内存组织方式
 (1) 内存是一个个单元组成的，每一个内存单元中存放一个字节（8位）的二进制信息。
 (2) 机器中的内存单元是有序排列的。
 (3) 机器给各个内存单元规定不同地址来管理内存。这样，CPU通过地址来识别不同的内存单元，正确的对内存单元进行操作。

2> 指针与变量的关系(P:是指针变量，C:内存对象)
>>> P:保存C:中的单元首地址——这里的地址不是物理地址，而是经过地址映射后的虚拟地址，即逻辑地址。
>>> P:为指向C:的指针
3>理解指针
>>> 指针占用的内存空间大小:　32位系统占用4byte，64为8byte。
>>> 指针就是地址——我们可以把指针认为是用来存放地址的数据类型。不能把指针简简单单的当成一个整型数，虽然地址的值是一个整型数据。
>>> 指针是有类型的，但是这个类型不是给指针分配内存的，而是用来寻址的。
指针与函数参数
1.普通参数:C语言通过传值方式将值传递给被调用函数。
>> 会把变量的值复制一份给被调用函数。
>> 复制:会把变量的值赋值给一个新的变量(参数)——变量和新的变量必须有相同的存储容量。
>> 被调用函数并不能修改主调程序中的变量值，因为被调用函数使用的是一个复制过来的内存单元。
2.指针参数: 本质上跟普通参数传递是相同的，也进行了变量复制，但是传过去的值是地址。 被调用函数通过地址能够访问和修改主调程序中变量的值。
3.参数在内存消耗
普通参数:取决于申明类型。char:1个字节;short:2个字节;long:8个字节
指针参数:指针变量里存储的是地址(一般是4个字节——32位)，永远是一个固定长度，不管是什么类型的指针。——除非处理器变化不是32位。
4.double *dp, atof(char *) 这里的dp是指针变量，而atof是函数
指针与数组
1.指针操作数组快于下标操作数组
2.数组的空间分配.如int a[10];——会在空间分配出40个相邻的内存单元来(10*4)。
3.指针操作数组
int *pa;
 pa = &a[0];
4.指针移动
int *pa;
int a[10];
pa = &a[0];
pa+1将指向下一个元素a[1]:
>> 内存中的变化:”指针加1″会根据指针指定的类型int移动4个内存单元，其实本身并没有移动，只是pa+1等于第5个内存单元地址——“指针加1”中的1的大小是取决于pa的类型int的，指针类型决定指针跨内存单元的步长。
>> pa+1 等于是指向第5个内存单元——a[1]的第一个内存单元。
5.规则:
>> &a[i]和a+i含义相同，相互使用。a+i是a之后第i个元素地址。
>> 数组名代表数组第一个元素的地址。
地址运算符
1. 指针初始化:0或表示地址的表达式。
2. “指针加1”中的“1”的大小根据数据类型的长度按比例缩放。如果int类型占4个字节的存储空间，对应的1按4倍计算。
指针与字符串
>> 单引号括起来的字符：实际上代表一个整数，整数值就是这个字符的ASCII值大小，如‘a’跟97（十进制）的含义是严格一致的，甚至可以互换。
>> 双引号括起来的字符串：实际上代表一个指向无名数组起始字符的指针，这个无名数组被双引号之间的字符串和一个字符‘\0’初始化，而且这个数组内部数据是只读的，无法修改。
>> 程序中使用字符串常量会生成一个“指向字符的常量指针”，当一个字符串常量出现在 一个表达式中时，表达式使用的值就是这些字符所存储的地址，而不是这些字符本身。因此，可以把字符串常量赋值给一个“指向字符的指针”，该指针指向这些字 符所存储的地址。但是，不能把字符串常量赋值给一个字符数组，因为字符串常量的直接值是一个指针，而不是这些字符本身。
>> 在C语言中，字符串就是一串以NUL字节结尾的字符序列。NUL虽是字符串的终结符，但它本 身并不是字符串的一部分。NUL是ASCII字符集中 ‘\0’ 字符的名字，是1个字节域的全0；NULL是一个数值为0的指针，通常是占用4个字节域的全0。虽然它们都是0，甚至某些场合可以互换使用（不考虑数据宽 度），但实际工程中还是要使用适当的常量。


1、感兴趣的是
内存中每个位置由一个独一无二的地址标志
内存中的每个位置都包含一个值

值和类型
指针变量的内容
未初始化和非法的指针

指针常量
非法：
*10000 =25
正确：
*(int *)10000 = 25
主要场景：预先知道地址；访问设备的控制器借口


复杂类型阅读

1.阅读——从右向左规则。

>> 规则符号:

* 读作”指向…的指针”

[] 读作”…的数组”

() 读作”返回…的函数”

下面两个示例:

int *f() ; // f: 返回指向int型的指针

>>步骤:

1)找标识符f：读作”f是…”

2)向右看,发现”()”读作”f是返回…的函数”

3)向右看没有什么，向左看，发现*，读作”f是返回指向…的指针的函数”

4)继续向左看,发现int,读作”f是返回指向int型的指针的函数”


int (*pf)(); // pf是一个指针——指向返回值为int型的函数

1)标识符pf，读作“pf是…”

2)向右看,发现),向左看，发现*,读作 “pf是指向…的指针”

3)向右看，发现”()”,读作“pf是指向返回…的函数的指针”

4)向右看，没有，向左看发现int，读作”pf是指向返回int型的函数的指针”

